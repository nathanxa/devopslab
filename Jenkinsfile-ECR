@Library('my_shared_lib') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destory')
        string(name: 'aws_account_id', description: "name of the AWS Account ID", defaultValue: '496157679619')
        string(name: 'Region', description: "Region of Region", defaultValue: 'us')
        string(name: 'ECR_Repo_Name', description: "name of the ECR Repo", defaultValue: 'nathanxa')
    }

    stages {
      
        stage("Git Checkout"){
            when { expression { params.action == 'create'}}

            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/nathanxa/devopslab.git"
            )
            }
        }

        stage("Unit Test maven"){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    mvnTest()
                }
            }
        }

        stage("Integration Test maven"){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    mvnIntegrationTest()
                }
            }
        }

        stage("SCA: SonarQube"){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    def SonarQubecredentialsId = 'sonar-api'
                    staticCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }

        stage("Quality Gate Status Check: SonarQube"){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    def SonarQubecredentialsId = 'sonar-api'
                    qualityGateStatus(SonarQubecredentialsId)
                }
            }
        }

        stage("Maven Build: maven"){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    mvnBuild()
                }
            }
        }

        stage("Docker Image Build : ECR"){
        when { expression { params.action == 'create'}}
            steps{
                script{

                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

        stage("Docker Image Scan: Trivy"){
        when { expression { params.action == 'create'}}
            steps{
                script{

                    dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

        stage("Docker Image Push: Docker Hub"){
        when { expression { params.action == 'create'}}
            steps{
                script{

                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }

        stage("Docker Image Clean: Docker Hub"){
        when { expression { params.action == 'create'}}
            steps{
                script{

                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_Repo_Name}")
                }
            }
        }


    }

}